<div class="brand-slider__container">
  <h2>Similar brands</h2>
  <div
    data-keen-slider='
      {
        "slidesPerView": 4,
        "autoAdjustSlidesPerView": true,
        "loop": true,
        "spacing": 26,
        "arrows": true,
        "responsive": [
          {
            "breakpoint": "1000px",
            "settings": {
              "slidesPerView": 2
            }
          }
        ]
      }
    '
    id="brand-slider"
    class="brand-slider__slider"
  >
    <div class="brand-slider__item" data-brand="1"></div>
    <div class="brand-slider__item" data-brand="2"></div>
    <div class="brand-slider__item" data-brand="3"></div>
    <div class="brand-slider__item" data-brand="4"></div>
    <div class="brand-slider__item" data-brand="5"></div>
    <div class="brand-slider__item" data-brand="6"></div>
    <div class="brand-slider__item" data-brand="7"></div>
    <div class="brand-slider__item" data-brand="8"></div>
  </div>
</div>

<style>
  .brand-slider__container {
    height: 0;
    padding: 0;
    top: -20px;
    max-width: 1220px;
    margin: 0 auto;
    overflow: hidden;
  }
  .brand-slider__container h2 {
    display: none;
    font-family: 'Avenir';
    font-size: 26px;
    font-weight: 400;
    margin: 0 0 12px;
  }

  .brand-slider__item {
    flex-basis: calc(50% - 26px);
    border-radius: 6px;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-shrink: 0;
    flex-direction: column;
  }

  .brand-slider__item a {
    cursor: pointer;
  }

  .brand-slider__image img {
    object-fit: contain;
  }

  .brand-slider__item p {
    color: #162411;
    font-family: Avenir, Arial, sans-serif;
    font-size: 12px;
    font-weight: 800;
    line-height: 16px;
    letter-spacing: 1.3px;
    text-transform: uppercase;
    text-align: center;
    margin-top: 10px;
  }

  @media screen and (min-width: 835px) {
    .brand-slider__container {
      padding-left: 40px;
      padding-right: 40px;
    }
  }

  @media screen and (min-width: 1369px) {
    .brand-slider__container {
      max-width: 1440px;
    }
  }
</style>

{% assign col_handle = product.vendor | handleize %}
{% for c in product.collections %}
  {% if c.handle contains col_handle %}
    {%  assign linked_collection = c %}
    {% assign linked_brand = c.handle %}
    {% break %}
  {% endif %}
{% endfor %}

<script>
  const currentCollectionHandle = "{{ linked_brand }}";
  const collections = {{ collections | json }};
  const exclusions = [
    "8Greens",
    "Aloe Pura",
    "Bathing Beauty",
    "blk.",
    "Blooming Blends",
    "by Molly&Izzie",
    "Cliganic",
    "Culturelle",
    "Dodow",
    "Dr Vegan",
    "FEWE",
    "Grass & Co.",
    "HMN24",
    "HUX",
    "immi",
    "Irwin Naturals",
    "Javy Coffee",
    "JOYMODE",
    "Lab Tonica",
    "Longevity Box",
    "MaryRuth Organics",
    "Manta Health",
    "Meglio",
    "Mol'far",
    "Natalia Botanicals",
    "Natural Stacks",
    "Natural Vitality",
    "NeuroGum",
    "Nuzest",
    "Obvi",
    "ORGANii",
    "OQO",
    "PÃ„RLA",
    "Power Plate",
    "Protekt",
    "Raise & Replenish",
    "Rasa",
    "Recovery Room",
    "STYRKR",
    "Synergised",
    "Tea Drops",
    "The Beard Struggle",
    "The Naked Pharmacy",
    "ThisWorks",
    "Thisworks",
    "Together Health",
    "Truff",
    "Troscriptions",
    "Vida Glow",
    "Vital Proteins",
    "VivoBase",
    "YourGut",
    "Zooki",
  ];

  async function getRecommendations(ids, currentBrand) {
     // Fetch related products for each product id
     const result = await Promise.allSettled(
      ids.map(async (id) => {
         try {
            const response = await fetch(`${window.Shopify.routes.root}recommendations/products.json?product_id=${id}&limit=10&intent=related`);

            if (!response?.ok) throw new Error(`Couldn't fetch related products for: ${id}`);

            if (response?.status === 200) {
              const data = await response.json();

              return data?.products;
            }
         } catch (err) {
            return null;
         }
      })
    );

    const generatedProducts = result?.map((r) => {
      // Return only succesful resolved queries
      if (r?.status === 'fulfilled') return r.value;

      return null;
    }).filter(Boolean).flatMap(x => x);

    // If no related products were generated, hide the slider
    if (!generatedProducts?.length) {
      document.querySelector('.brand-slider__container').style.display = 'none';

      return [];
    }

    // Generate unique brand list that isn't the brand/vendor user is currently on
    const uniqueRelatedBrands = generatedProducts.map(product => ({ vendor: product?.vendor, featured_image: product.featured_image})).filter(p => p.vendor !== currentBrand).filter(
      (obj, index, arr) =>
      {
         return arr.findIndex(o =>
          {
            return o.vendor === obj.vendor
          }) === index
      }
    ).filter(product => !exclusions.includes(product.vendor));

    return uniqueRelatedBrands;
  }

  async function getRelatedBrands() {
    console.log("getRelatedBrands");
    let recommendationIds = [];
    let currentBrand;

    // Grab first 5 products from collection so we can use them for the source of recommendations
    {% for product in linked_collection.products limit:5 %}
      recommendationIds.push('{{ product.id }}');

      {% if forloop.index == 1 %}
        currentBrand = '{{product.vendor}}';
      {% endif %}
    {% endfor %}

    if (recommendationIds.length) {
      let brands;
      // Load from session if returning to page to save on requests
      const brandsFromSession = sessionStorage.getItem(currentBrand);

      if (brandsFromSession) {
        brands = JSON.parse(brandsFromSession);
      } else {
        brands = await getRecommendations(recommendationIds, currentBrand);
        sessionStorage.setItem(currentBrand, JSON.stringify(brands));
      }

      if (!brands?.length) {
        // Hide if there are no brand recommendations
        document.querySelector('.brand-slider__container').style.display = 'none';
        return;
      }

      if (brands.length < 4) {
        const totalBrands = brands.length;
        const screenWidth = window.innerWidth;

        if (screenWidth < 1000 && totalBrands < 2) {
          document.querySelector('.brand-slider__container').style.display = 'none';
        } else if (screenWidth < 1200 && totalBrands < 3) {
          document.querySelector('.brand-slider__container').style.display = 'none';
        } else if (totalBrands < 4 && screenWidth >= 1200) {
          document.querySelector('.brand-slider__container').style.display = 'none';
        }
      }

      brands.forEach((b, i) => {
        // Grab slider item we will insert into
        const sliderItem = document.querySelector(`[data-brand='${i + 1}']`);

        if (!sliderItem) return;

        // Build brand UI
        const brand = document.createElement('a');
        const imageWrap = document.createElement('div');
        const brandName = document.createElement('p');

        brandName.textContent = b.vendor;

        const collection = collections.find(c => c?.title === b.vendor);

        if (collection) {
          brand.href = `/collections/${collection.handle}`;
        }

        const img = b.featured_image;

        if (img) {
          const image = document.createElement('img');
          image.src = img;
          image.classList.add('brand-slider__image');
          imageWrap.appendChild(image);
        }

        brand.appendChild(imageWrap)
        brand.appendChild(brandName);

        sliderItem.appendChild(brand);
      });

      // Cleanup empty elements in the slider
      const emptyBrands = document.querySelectorAll('[data-brand]:empty');
      const emptyLength = emptyBrands.length;

      emptyBrands.forEach(brand => {
        brand.remove();
      });

      // Not ideal - needs timeout to wait for Keen slider to intialize otherwise we throw an error
      if (emptyLength > 2 && window.innerWidth > 1000) setTimeout(() => document.querySelector('#brand-slider .keen-nav').style.display = 'none', 1000);
    }
  }

  try {
    getRelatedBrands();
  } catch (e) {
    console.log(e);

    // Cleanup if there's a JS error
    const container = document.querySelector('.brand-slider__container');
    container.style.display = 'none';
  }
</script>